"""
Django settings for prediction project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import tensorflow as tf

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ph78b4wh=t1vdy9c3m@vg6f04byty-#t(a#yn8oq9e#qh8x6gr"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # required library
    "drf_yasg",
    "rest_framework",
    "rest_framework_simplejwt",
    "auditlog",
    # custom apps
    "users",
    "predict",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # track all activity users
    "auditlog.middleware.AuditlogMiddleware",
]

ROOT_URLCONF = "prediction.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "prediction.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# rest framework configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

# simple jwt config
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "TOKEN_OBTAIN_SERIALIZER": "users.serializers.token.CustomTokenObtainPairSerializer",
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# remove suffix slash
APPEND_SLASH = False

# this for upload images
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# swagger setting
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
    }
}

# custom user models
AUTH_USER_MODEL = "users.User"

# google oauth client id
OAUTH_GOOGLE_CLIENT_ID = os.environ.get("OAUTH_GOOGLE_CLIENT_ID")
OAUTH_GOOGLE_CLIENT_SECRET = os.environ.get("OAUTH_GOOGLE_CLIENT_SECRET")

# mapping for result
PLANT_DISEASE_MAP = {
    0: "Apple Scab",
    1: "Black Rot",
    2: "Cedar Apple Rust",
    3: "Healthy",
    4: "Healthy",
    5: "Powdery Mildew",
    6: "Healthy",
    7: "Cercospora Leaf Spot (Gray Leaf Spot)",
    8: "Common Rust",
    9: "Northern Leaf Blight",
    10: "Healthy",
    11: "Black Rot",
    12: "Esca (Black Measles)",
    13: "Leaf Blight (Isariopsis Leaf Spot)",
    14: "Healthy",
    15: "Haunglongbing (Citrus Greening)",
    16: "Bacterial Spot",
    17: "Healthy",
    18: "Bacterial Spot",
    19: "Healthy",
    20: "Early Blight",
    21: "Late Blight",
    22: "Healthy",
    23: "Healthy",
    24: "Healthy",
    25: "Powdery Mildew",
    26: "Leaf Scorch",
    27: "Healthy",
    28: "Bacterial Spot",
    29: "Early Blight",
    30: "Late Blight",
    31: "Leaf Mold",
    32: "Septoria Leaf Spot",
    33: "Spider Mites (Two-spotted Spider Mite)",
    34: "Target Spot",
    35: "Tomato Yellow Leaf Curl Virus",
    36: "Tomato Mosaic Virus",
    37: "Healthy",
}

# load model in memory, when services is first start
# we can move this file to another storage in actual
# such as redis or memcached
model_path = os.path.join(BASE_DIR, "models", "best_plant_disease.h5")
BASE_MODEL = tf.keras.models.load_model(model_path)
